{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","name","src","id","email","CardList","monsters","map","SearchField","handleChange","placeholder","type","onChange","App","e","target","value","state","setState","searchField","testCheckbox","fetch","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAoBeA,G,kBAjBF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAGX,OACI,mCACI,sBAAKC,UAAW,iBAAhB,UACI,qBACIC,IAAG,UAAKF,EAAQG,KAAb,cACHC,IAAG,+BAA0BJ,EAAQK,GAAlC,4BACP,6BAAKL,EAAQG,OACb,4BAAIH,EAAQM,eCCbC,EAVE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEf,OACI,qBAAKP,UAAW,YAAhB,SACCO,EAASC,KAAI,SAACT,GAAD,OACN,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQK,UCOpBK,G,MAZK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAIhC,OACI,mCACI,uBAAOX,UAAS,SAAYY,KAAI,SAAYV,KAAI,cAAiBS,YAAaA,EAAaE,SAAUH,QC0ClGI,E,kDA7Cb,aAAe,IAAD,8BACZ,gBASFJ,aAAe,SAACK,GACd,IAAMC,EAASD,EAAEC,OACXd,EAAOc,EAAOd,KACde,EAAQ,aAAAD,EAAOJ,MAAwB,EAAKM,MAAMhB,GAASc,EAAOC,MACxE,EAAKE,SAAL,eACGjB,EAAQe,KAZX,EAAKC,MAAQ,CACXX,SAAU,GACVa,YAAY,GACZC,cAAc,GANJ,E,kMAoBWC,MAAM,8C,cAAvBC,E,gBACcA,EAASC,O,OAAvBC,E,OACNC,KAAKP,SAAS,CAACZ,SAAUkB,I,qIAGjB,IACDf,EAAgBgB,KAAhBhB,aADA,EAE4BgB,KAAKR,MAAhCX,EAFD,EAECA,SAAWa,EAFZ,EAEYA,YACbO,EAAmBpB,EAASqB,QAC9B,SAAA7B,GAAO,OACPA,EAAQG,KAAK2B,cACRC,SACGV,EAAYS,kBAExB,OACI,sBAAK7B,UAAU,MAAf,UACE,yCACA,cAAC,EAAD,CAAaW,YAAW,kBAAqBD,aAAcA,IAC3D,cAAC,EAAD,CAAUH,SAAUoB,W,GAxCZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c9f22c5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nconst Card = ({monster}) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={'card-container'}>\r\n                <img\r\n                    alt={`${monster.name}'s profile`}\r\n                    src={`https://robohash.org/${monster.id}?set=set5&size=180x180`} />\r\n                <h2>{monster.name}</h2>\r\n                <p>{monster.email}</p>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component.js';\r\n\r\nconst CardList = ({monsters}) => {\r\n\r\n    return (\r\n        <div className={'card-list'}>\r\n        {monsters.map((monster)=>\r\n                <Card key={monster.id} monster={monster}/>\r\n        )}\r\n        </div>)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nconst SearchField = ({handleChange, placeholder}) => {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <input className={`search`} type={`search`} name={`searchField`} placeholder={placeholder} onChange={handleChange}/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchField;","import './App.css';\nimport {Component} from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchField from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ``,\n      testCheckbox: false\n    }\n  }\n\n  handleChange = (e) => {\n    const target = e.target;\n    const name = target.name;\n    const value = target.type === `checkbox` ? !(this.state[name]) : target.value;\n    this.setState({\n      [name] : value\n    })\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\n    const users = await response.json();\n    this.setState({monsters: users})\n  }\n\n  render() {\n    const {handleChange} = this;\n    const { monsters , searchField } = this.state\n    const filteredMonsters = monsters.filter(\n        monster =>\n        monster.name.toLowerCase()\n            .includes(\n                searchField.toLowerCase()\n            ));\n    return (\n        <div className=\"App\">\n          <h1>Rolodex</h1>\n          <SearchField placeholder={`Search Monsters`} handleChange={handleChange}/>\n          <CardList monsters={filteredMonsters} />\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}